{"ast":null,"code":"var _jsxFileName = \"/Users/Cupcake/google-forms-clone/client/src/components/formResponse.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport './formResponse.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormResponse = () => {\n  _s();\n  const {\n    formId\n  } = useParams(); // Extract formId from the URL\n  const [form, setForm] = useState(null); // Store the form data\n  const [answers, setAnswers] = useState({}); // Store the user's answers\n\n  useEffect(() => {\n    const fetchForm = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/forms/${formId}`);\n        setForm(response.data); // Set the form data\n        console.log('Fetched form:', response.data); // Log the fetched form\n      } catch (error) {\n        console.error('Error fetching form:', error); // Log any errors\n      }\n    };\n    if (formId) {\n      fetchForm(); // Fetch the form if formId is available\n    }\n  }, [formId]); // Only run this effect when formId changes\n\n  // Handle changes to form inputs\n  const handleInputChange = (questionId, answer) => {\n    setAnswers({\n      ...answers,\n      [questionId]: answer\n    });\n  };\n\n  // Submit the user's answers\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(`http://localhost:5000/api/forms/${formId}/responses`, {\n        answers\n      });\n      alert('Responses submitted successfully');\n    } catch (error) {\n      console.error('Error submitting responses:', error); // Log any errors during submission\n    }\n  };\n\n  // Display loading message while the form is being fetched\n  if (!form) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading form...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: form.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: form.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), form.questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: question.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), question.questionType === 'text' && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Your answer\",\n        onChange: e => handleInputChange(question._id, e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), question.questionType === 'multiple-choice' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"multiple-choice-options\",\n        children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${question._id}`,\n            value: option,\n            onChange: e => handleInputChange(question._id, option)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 19\n          }, this), option]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), question.questionType === 'checkbox' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-options\",\n        children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: `question-${question._id}`,\n            value: option,\n            onChange: e => {\n              const updatedAnswers = answers[question._id] || [];\n              if (e.target.checked) {\n                updatedAnswers.push(option); // Add option if checked\n              } else {\n                const optionIndex = updatedAnswers.indexOf(option);\n                updatedAnswers.splice(optionIndex, 1); // Remove option if unchecked\n              }\n              handleInputChange(question._id, updatedAnswers);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this), option]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, question._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(FormResponse, \"OgZaQ9SBr+yc0LFl84sNa3+VY8w=\", false, function () {\n  return [useParams];\n});\n_c = FormResponse;\nexport default FormResponse;\nvar _c;\n$RefreshReg$(_c, \"FormResponse\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","FormResponse","_s","formId","form","setForm","answers","setAnswers","fetchForm","response","get","data","console","log","error","handleInputChange","questionId","answer","handleSubmit","e","preventDefault","post","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","title","description","questions","map","question","className","questionText","questionType","type","placeholder","onChange","_id","target","value","options","option","index","name","updatedAnswers","checked","push","optionIndex","indexOf","splice","_c","$RefreshReg$"],"sources":["/Users/Cupcake/google-forms-clone/client/src/components/formResponse.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport './formResponse.css';\n\nconst FormResponse = () => {\n  const { formId } = useParams(); // Extract formId from the URL\n  const [form, setForm] = useState(null); // Store the form data\n  const [answers, setAnswers] = useState({}); // Store the user's answers\n\n  useEffect(() => {\n    const fetchForm = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/forms/${formId}`);\n        setForm(response.data); // Set the form data\n        console.log('Fetched form:', response.data); // Log the fetched form\n      } catch (error) {\n        console.error('Error fetching form:', error); // Log any errors\n      }\n    };\n\n    if (formId) {\n      fetchForm(); // Fetch the form if formId is available\n    }\n  }, [formId]); // Only run this effect when formId changes\n\n  // Handle changes to form inputs\n  const handleInputChange = (questionId, answer) => {\n    setAnswers({\n      ...answers,\n      [questionId]: answer,\n    });\n  };\n\n  // Submit the user's answers\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post(`http://localhost:5000/api/forms/${formId}/responses`, { answers });\n      alert('Responses submitted successfully');\n    } catch (error) {\n      console.error('Error submitting responses:', error); // Log any errors during submission\n    }\n  };\n\n  // Display loading message while the form is being fetched\n  if (!form) return <div>Loading form...</div>;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>{form.title}</h2>\n      <p>{form.description}</p>\n      {form.questions.map((question) => (\n        <div key={question._id} className=\"question-block\">\n          <label>{question.questionText}</label>\n\n          {/* Handle different input types based on the question type */}\n          {question.questionType === 'text' && (\n            <input\n              type=\"text\"\n              placeholder=\"Your answer\"\n              onChange={(e) => handleInputChange(question._id, e.target.value)}\n            />\n          )}\n\n          {question.questionType === 'multiple-choice' && (\n            <div className=\"multiple-choice-options\">\n              {question.options.map((option, index) => (\n                <label key={index}>\n                  <input\n                    type=\"radio\"\n                    name={`question-${question._id}`}\n                    value={option}\n                    onChange={(e) => handleInputChange(question._id, option)}\n                  />\n                  {option}\n                </label>\n              ))}\n            </div>\n          )}\n\n          {question.questionType === 'checkbox' && (\n            <div className=\"checkbox-options\">\n              {question.options.map((option, index) => (\n                <label key={index}>\n                  <input\n                    type=\"checkbox\"\n                    name={`question-${question._id}`}\n                    value={option}\n                    onChange={(e) => {\n                      const updatedAnswers = answers[question._id] || [];\n                      if (e.target.checked) {\n                        updatedAnswers.push(option); // Add option if checked\n                      } else {\n                        const optionIndex = updatedAnswers.indexOf(option);\n                        updatedAnswers.splice(optionIndex, 1); // Remove option if unchecked\n                      }\n                      handleInputChange(question._id, updatedAnswers);\n                    }}\n                  />\n                  {option}\n                </label>\n              ))}\n            </div>\n          )}\n\n          {/* Add other question types as needed */}\n        </div>\n      ))}\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default FormResponse;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}